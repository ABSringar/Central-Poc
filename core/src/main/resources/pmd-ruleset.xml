<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="Custom ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

    <description>
        This rule set checks the code for bad stuff
    </description>
    <!-- including rule sets shipped with PMD : START -->
    <rule ref="category/java/performance.xml" />
    <rule ref="category/java/multithreading.xml"/>
    <rule ref="category/java/errorprone.xml">
        <exclude name="BeanMembersShouldSerialize"></exclude>
        <exclude name="DataflowAnomalyAnalysis"></exclude>
        <exclude name="InvalidSlf4jMessageFormat"></exclude>
    </rule>
    <rule ref="category/java/design.xml">
        <exclude name="LawOfDemeter"></exclude>
        <exclude name="DataClass"></exclude>
        <exclude name="ExcessiveImports"></exclude>
    </rule>
    <rule ref="category/java/design.xml/NcssCount">
        <properties>
            <property name="methodReportLevel" value="25"></property>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/ExcessiveImports">
        <properties>
            <property name="minimum" value="40"></property>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ConfusingTernary">
        <properties>
            <property name="ignoreElseIf" value="true"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml">
        <exclude name="AtLeastOneConstructor"></exclude>
        <exclude name="MethodArgumentCouldBeFinal"></exclude>
        <exclude name="LongVariable"></exclude>
        <exclude name="LocalVariableCouldBeFinal"></exclude>
        <exclude name="ClassNamingConventions"></exclude>
    </rule>
    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
        <properties>
            <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]+"/>
        </properties>
    </rule>
    <rule ref="category/java/bestpractices.xml">
        <exclude name="GuardLogStatement"/>
    </rule>
    <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody" />

    <!-- including rule sets shipped with PMD : END   -->


    <!-- Rules for Resource Resolver Best Practises : START -->
    <rule name="SessionBaseObjectNotSafeResourceResolver"
          message="ResourceResolver is not safe at Class Level"
          class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">

        <description>ResourceResolver is not safe at Class Level,they should be method variables
            instead
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                    //ClassOrInterfaceDeclaration[preceding::ImportDeclaration/Name/@Image = "org.apache.sling.api.resource.ResourceResolver"]
                    //ClassOrInterfaceBodyDeclaration/FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image="ResourceResolver"]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
               @SuppressWarnings("serial")
               @SlingServlet(path = "")
                public class SimpleServlet extends SlingSafeMethodsServlet {
                    @Reference
                    ResourceResolverFactory resourceResolverFactory;
                    ResourceResolver resolver; //its not safe
                    @Override
                    protected void doGet(final SlingHttpServletRequest req,
                            final SlingHttpServletResponse resp) throws ServletException, IOException {

                        resolver = resourceResolverFactory.getAdministrativeResolver(null);
                        final Resource resource = req.getResource();
                        resp.getOutputStream().println(resource.toString());
                        resp.getOutputStream().println(
                                "This content is generated by the SimpleServlet");
                    }
                }
            ]]>
        </example>
    </rule>
    <rule name="adminResourceResolver" message="Admin Resource Resolver should not be used"
          class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">

        <description>Admin ResourceResolver should not be used, use getServiceResourceResolver
            instead
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                        //ClassOrInterfaceDeclaration[preceding::ImportDeclaration/Name/@Image = "org.apache.sling.api.resource.ResourceResolver"]
                        //PrimaryPrefix/Name[contains(@Image,"getAdministrativeResourceResolver")]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
               @SuppressWarnings("serial")
               @SlingServlet(path = "")
                public class SimpleServlet extends SlingSafeMethodsServlet {
                    @Reference
                    ResourceResolverFactory resourceResolverFactory;
                    @Override
                    protected void doGet(final SlingHttpServletRequest req,
                            final SlingHttpServletResponse resp) throws ServletException, IOException {

                        ResourceResolver resolver = resourceResolverFactory.getAdministrativeResourceResolver(null);
                        //use getServiceResourceResolver instead of this!!
                        final Resource resource = req.getResource();
                        resp.getOutputStream().println(resource.toString());
                        resp.getOutputStream().println(
                                "This content is generated by the SimpleServlet");
                    }
                }
            ]]>
        </example>
    </rule>
    <rule name="resourceResolverNotClosed" message="Resource Resolver should be closed"
          class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">

        <description>ResourceResolver should be closed, unclosed resource resolver leaks memory
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                        //ClassOrInterfaceDeclaration[preceding::ImportDeclaration/Name/@Image = "org.apache.sling.api.resource.ResourceResolver"]
                        [
                               count(//PrimaryPrefix/Name[contains(@Image,"getServiceResourceResolver")])
                               !=
                               count(
                                        //PrimaryPrefix/Name[
                                                                contains(
                                                                            @Image,
                                                                            //LocalVariableDeclaration/VariableDeclarator
                            [preceding-sibling::Type/ReferenceType/ClassOrInterfaceType[@Image="ResourceResolver"]]/VariableDeclaratorId/@Image
                                                                )
                                                                and
                                                                contains(@Image,".close")
                                        ]
                                    )
                        ]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
               @SuppressWarnings("serial")
               @SlingServlet(path = "")
                public class SimpleServlet extends SlingSafeMethodsServlet {
                    @Reference
                    ResourceResolverFactory resourceResolverFactory;
                    @Override
                    protected void doGet(final SlingHttpServletRequest req,
                            final SlingHttpServletResponse resp) throws ServletException, IOException {

                        ResourceResolver resolver = resourceResolverFactory.getServiceResourceResolver(null);
                        //use getServiceResourceResolver instead of this!!
                        final Resource resource = req.getResource();
                        resp.getOutputStream().println(resource.toString());
                        resp.getOutputStream().println(
                                "This content is generated by the SimpleServlet");
                    }
                }
            ]]>
        </example>
    </rule>
    <!-- Rules for ResourceResolver Best Practices : END -->


    <!-- Rules for Session Best Practises : START -->
    <rule name="SessionBaseObjectNotJcrSession" message="JCR Session is not safe at Class Level"
          class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">

        <description>JCR Session is not safe at Class Level,they should be method variables
            instead
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                    //ClassOrInterfaceDeclaration[preceding::ImportDeclaration/Name/@Image = "javax.jcr.Session"]
                    //ClassOrInterfaceBodyDeclaration/FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image="Session"]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
               @SuppressWarnings("serial")
               @SlingServlet(path = "")
                public class SimpleServlet extends SlingSafeMethodsServlet {
                    @Reference
                    private SlingRepository slingRepository;
                    Private Session session; //its not safe
                    @Override
                    protected void doGet(final SlingHttpServletRequest req,
                            final SlingHttpServletResponse resp) throws ServletException, IOException {

                        session = slingRepository.loginService(null, repository.getDefaultWorkspace());
                        final Resource resource = req.getResource();
                        resp.getOutputStream().println(resource.toString());
                        resp.getOutputStream().println(
                                "This content is generated by the SimpleServlet");
                    }
                }
            ]]>
        </example>
    </rule>
    <rule name="adminSessionJcr" message="loginAdministrative should not be used to obtain session"
          class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">

        <description>loginAdministrative should not be used, use loginService instead</description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                        //ClassOrInterfaceDeclaration[preceding::ImportDeclaration/Name/@Image = "org.apache.sling.jcr.api.SlingRepository"]
                        //PrimaryPrefix/Name[contains(@Image,"loginAdministrative")]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
               @SuppressWarnings("serial")
               @SlingServlet(path = "")
                public class SimpleServlet extends SlingSafeMethodsServlet {
                   @Reference
                    private SlingRepository slingRepository;
                    Private Session session; //its not safe
                    @Override
                    protected void doGet(final SlingHttpServletRequest req,
                            final SlingHttpServletResponse resp) throws ServletException, IOException {

                        session = slingRepository.loginAdministrative(null);
                        final Resource resource = req.getResource();
                        resp.getOutputStream().println(resource.toString());
                        resp.getOutputStream().println(
                                "This content is generated by the SimpleServlet");
                    }
                }
            ]]>
        </example>
    </rule>
    <rule name="JcrSessionNotClosed" message="JCR Session Not Closed"
          class="net.sourceforge.pmd.lang.rule.XPathRule" language="java">

        <description>Session should be closed, unclosed session leaks memory</description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                        //ClassOrInterfaceDeclaration[preceding::ImportDeclaration/Name/@Image = "javax.jcr.Session"]
                        [
                               count(//PrimaryPrefix/Name[contains(@Image,"loginService")])
                               !=
                               count(
                                        //PrimaryPrefix/Name[
                                                                contains(
                                                                            @Image,
                                                                            //LocalVariableDeclaration/VariableDeclarator
                            [preceding-sibling::Type/ReferenceType/ClassOrInterfaceType[@Image="Session"]]/VariableDeclaratorId/@Image
                                                                )
                                                                and
                                                                contains(@Image,".logout")
                                        ]
                                    )
                        ]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
               @SuppressWarnings("serial")
               @SlingServlet(path = "")
                public class SimpleServlet extends SlingSafeMethodsServlet {
                    @Reference
                    private SlingRepository slingRepository;
                    Private Session session; //its not safe
                    @Override
                    protected void doGet(final SlingHttpServletRequest req,
                            final SlingHttpServletResponse resp) throws ServletException, IOException {

                        session = slingRepository.loginService(null);
                        final Resource resource = req.getResource();
                        resp.getOutputStream().println(resource.toString());
                        resp.getOutputStream().println(
                                "This content is generated by the SimpleServlet");
                    }
                }
            ]]>
        </example>
    </rule>
    <!-- Rules for Session Best Practices : END -->

</ruleset>
